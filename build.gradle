// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    repositories {
        if (Boolean.parseBoolean(USE_ALIYUN_REPO)) {
            // Replacement of google()
            maven { url 'http://maven.aliyun.com/nexus/content/repositories/google' }
            // Replacement of mavenCentral()
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
            // Replacement of jcenter()
            maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        } else {
            google()
            jcenter()
            mavenCentral()
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath "cn.hikyson.methodcanary:plugin:${METHOD_CANARY_VERSION_NAME}"
    }
}

allprojects {
    repositories {
        if (Boolean.parseBoolean(USE_ALIYUN_REPO)) {
            // Replacement of google()
            maven { url 'http://maven.aliyun.com/nexus/content/repositories/google' }
            // Replacement of mavenCentral()
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
            // Replacement of jcenter()
            maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        } else {
            google()
            jcenter()
            mavenCentral()
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def realVersionName = VERSION_NAME
def TRAVIS_TAG = System.getenv("TRAVIS_TAG")
if (TRAVIS_TAG != null && "" != TRAVIS_TAG) {
    realVersionName = TRAVIS_TAG
    println "[VERSION] Version name is [" + realVersionName + "] by git tag."
} else {
    println "[VERSION] Version name is [" + realVersionName + "] by gradle.properties."
}

def versionPart = String.valueOf(realVersionName).split('\\.')
int realVersionCode = Integer.valueOf(versionPart[0]) * 1000000 + Integer.valueOf(versionPart[1]) * 1000 + Integer.valueOf(versionPart[2])

ext {
    REAL_VERSION_NAME = realVersionName
    REAL_VERSION_CODE = realVersionCode
}

println "[VERSION] Version name is [" + rootProject.ext.REAL_VERSION_NAME + "] and parsed version code is [" + rootProject.ext.REAL_VERSION_CODE + "]."

task copyForRelease(type: Copy) {
    from './app/build/outputs/apk/release/app-release.apk'
    into "./github_release"
}

task copyForDebug(type: Copy) {
    from './app/build/outputs/apk/debug/app-debug.apk'
    into "./github_release"
}
